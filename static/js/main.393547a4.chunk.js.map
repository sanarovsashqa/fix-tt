{"version":3,"sources":["app/services/helpers.js","app/components/PokemonsItem/index.js","app/components/PokemonsList/index.js","app/services/useFetch.js","app/components/Pagination/index.js","app/components/Preloader/index.js","app/pages/PokemonsPage/index.js","app/pages/PokemonPage/index.js","app/index.js","serviceWorker.js","index.js"],"names":["capitalizeFirstChar","string","charAt","toUpperCase","slice","PokemonsItem","props","linkPath","pokemon","name","className","to","PokemonsList","pokemonsList","pokemons","map","index","key","UseFetch","url","useState","response","setResponse","error","setError","isLoading","setIsLoading","useEffect","a","fetch","res","json","fetchData","startPage","endPage","totalPages","currentPage","numberButtons","Array","keys","i","number","onClick","onNumberClick","numberClick","prevClick","nextClick","Preloader","PokemonsPage","paginationOffset","setPaginationOffset","setCurrentPage","setTotalPages","Math","ceil","count","getPaginationOffset","pageNumber","results","PokemonPage","id","useParams","isImageLoad","setIsImageLoad","img","Image","src","sprites","front_default","onload","alt","App","WebFont","load","google","families","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.393547a4.chunk.js","sourcesContent":["export const capitalizeFirstChar = string => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { capitalizeFirstChar } from \"../../services/helpers\";\r\n\r\nfunction PokemonsItem(props) {\r\n  const linkPath = `/pokemon/${props.pokemon.name}`;\r\n\r\n  return (\r\n    <li className=\"pokemon-item\">\r\n      <Link to={linkPath} className=\"pokemon-item__link\">\r\n        {capitalizeFirstChar(props.pokemon.name)}\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default PokemonsItem;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nimport PokemonsItem from \"../PokemonsItem\";\r\n\r\nfunction PokemonsList(props) {\r\n  const pokemonsList = props.pokemons.map((pokemon, index) => {\r\n    return <PokemonsItem key={index} pokemon={pokemon} />;\r\n  });\r\n\r\n  return <ul className=\"pokemons-list\">{pokemonsList}</ul>;\r\n}\r\n\r\nexport default PokemonsList;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function UseFetch(url) {\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await fetch(url);\r\n        const json = await res.json();\r\n        setResponse(json);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { response, error, isLoading };\r\n}\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nfunction PokemonsItem(props) {\r\n  let startPage = null;\r\n  let endPage = null;\r\n\r\n  if (props.totalPages <= 10) {\r\n    startPage = 1;\r\n    endPage = props.totalPages;\r\n  } else {\r\n    if (props.currentPage <= 6) {\r\n      startPage = 1;\r\n      endPage = 10;\r\n    } else if (props.currentPage + 4 >= props.totalPages) {\r\n      startPage = props.totalPages - 9;\r\n      endPage = props.totalPages;\r\n    } else {\r\n      startPage = props.currentPage - 5;\r\n      endPage = props.currentPage + 4;\r\n    }\r\n  }\r\n\r\n  const numbers = [...Array(endPage + 1 - startPage).keys()];\r\n  const numberButtons = numbers.map(i => {\r\n    const number = startPage + i;\r\n\r\n    return (\r\n      <button\r\n        key={number}\r\n        className={`pagination__button ${\r\n          props.currentPage === number ? \"pagination__button--active\" : \"\"\r\n        }`}\r\n        onClick={() => onNumberClick(number)}\r\n      >\r\n        {number}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  const onPrevClick = () => {\r\n    props.prevClick();\r\n  };\r\n\r\n  const onNextClick = () => {\r\n    props.nextClick();\r\n  };\r\n\r\n  const onNumberClick = number => {\r\n    props.numberClick(number);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div className=\"pagination__button-wrapper\">\r\n        <button className=\"pagination__button\" onClick={onPrevClick}>\r\n          prev\r\n        </button>\r\n      </div>\r\n\r\n      {numberButtons}\r\n\r\n      <div className=\"pagination__button-wrapper\">\r\n        <button className=\"pagination__button\" onClick={onNextClick}>\r\n          next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonsItem;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nfunction Preloader() {\r\n  return (\r\n    <div className=\"preloader-wrapper\">\r\n      <div className=\"preloader\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preloader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nimport PokemonsList from \"../../components/PokemonsList\";\r\nimport UseFetch from \"../../services/useFetch\";\r\nimport Pagination from \"../../components/Pagination\";\r\nimport Preloader from \"../../components/Preloader\";\r\n\r\nfunction PokemonsPage() {\r\n  const [paginationOffset, setPaginationOffset] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(null);\r\n  const paginationLimit = 20;\r\n\r\n  const pokemons = UseFetch(\r\n    `https://pokeapi.co/api/v2/pokemon/?limit=${paginationLimit}&offset=${paginationOffset}`\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTotalPages(\r\n      Math.ceil(\r\n        pokemons.response\r\n          ? Math.ceil(pokemons.response.count / paginationLimit)\r\n          : null\r\n      )\r\n    );\r\n  }, [pokemons.response, paginationLimit]);\r\n\r\n  const getPaginationOffset = pageNumber => {\r\n    return (pageNumber - 1) * paginationLimit;\r\n  };\r\n\r\n  const onPrevPageClick = () => {\r\n    if (currentPage > 1) {\r\n      const pageNumber = currentPage - 1;\r\n\r\n      setCurrentPage(pageNumber);\r\n      setPaginationOffset(getPaginationOffset(pageNumber));\r\n    }\r\n  };\r\n\r\n  const onNextPageClick = () => {\r\n    if (currentPage < totalPages) {\r\n      const pageNumber = currentPage + 1;\r\n\r\n      setCurrentPage(pageNumber);\r\n      setPaginationOffset(getPaginationOffset(pageNumber));\r\n    }\r\n  };\r\n\r\n  const onNumberPageClick = pageNumber => {\r\n    if (pageNumber !== currentPage) {\r\n      setCurrentPage(pageNumber);\r\n      setPaginationOffset(getPaginationOffset(pageNumber));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pokemons container\">\r\n      <h1 className=\"pokemons__title\">PokeWorld</h1>\r\n      {pokemons.response && !pokemons.isLoading ? (\r\n        <div>\r\n          <div className=\"pokemons__list\">\r\n            <PokemonsList pokemons={pokemons.response.results}></PokemonsList>\r\n          </div>\r\n\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            totalPages={totalPages}\r\n            prevClick={onPrevPageClick}\r\n            nextClick={onNextPageClick}\r\n            numberClick={onNumberPageClick}\r\n          ></Pagination>\r\n        </div>\r\n      ) : (\r\n        <Preloader />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonsPage;\r\n","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport UseFetch from \"../../services/useFetch\";\r\nimport { capitalizeFirstChar } from \"../../services/helpers\";\r\nimport Preloader from \"../../components/Preloader\";\r\n\r\nfunction PokemonPage() {\r\n  let { id } = useParams();\r\n  const [isImageLoad, setIsImageLoad] = useState(false);\r\n\r\n  const pokemon = UseFetch(`https://pokeapi.co/api/v2/pokemon/${id}`);\r\n\r\n  const img = new Image();\r\n  img.src = pokemon.response ? pokemon.response.sprites.front_default : null;\r\n  img.onload = () => {\r\n    setIsImageLoad(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Link className=\"back-btn\" to={\"/\"}>\r\n        back\r\n      </Link>\r\n\r\n      {pokemon.response && isImageLoad ? (\r\n        <div className=\"pokemon\">\r\n          <img\r\n            className=\"pokemon__img\"\r\n            src={pokemon.response.sprites.front_default}\r\n            alt={pokemon.response.name}\r\n          />\r\n          <p className=\"pokemon__name\">\r\n            {capitalizeFirstChar(pokemon.response ? pokemon.response.name : \"\")}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <Preloader></Preloader>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonPage;\r\n","import React from \"react\";\nimport \"./index.scss\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport PokemonsPage from \"./pages/PokemonsPage\";\nimport PokemonPage from \"./pages/PokemonPage\";\nimport WebFont from \"webfontloader\";\n\nfunction App() {\n  WebFont.load({\n    google: {\n      families: [\"Oxanium:400,700\", \"sans-serif\"]\n    }\n  });\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <PokemonsPage />\n        </Route>\n        <Route path=\"/pokemon/:id\">\n          <PokemonPage />\n        </Route>\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}